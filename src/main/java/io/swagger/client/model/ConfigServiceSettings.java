/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConfigServiceSettings
 */

public class ConfigServiceSettings {
  @SerializedName("SiteURL")
  private String siteURL = null;

  @SerializedName("ListenAddress")
  private String listenAddress = null;

  @SerializedName("ConnectionSecurity")
  private String connectionSecurity = null;

  @SerializedName("TLSCertFile")
  private String tlSCertFile = null;

  @SerializedName("TLSKeyFile")
  private String tlSKeyFile = null;

  @SerializedName("UseLetsEncrypt")
  private Boolean useLetsEncrypt = null;

  @SerializedName("LetsEncryptCertificateCacheFile")
  private String letsEncryptCertificateCacheFile = null;

  @SerializedName("Forward80To443")
  private Boolean forward80To443 = null;

  @SerializedName("ReadTimeout")
  private Integer readTimeout = null;

  @SerializedName("WriteTimeout")
  private Integer writeTimeout = null;

  @SerializedName("MaximumLoginAttempts")
  private Integer maximumLoginAttempts = null;

  @SerializedName("SegmentDeveloperKey")
  private String segmentDeveloperKey = null;

  @SerializedName("GoogleDeveloperKey")
  private String googleDeveloperKey = null;

  @SerializedName("EnableOAuthServiceProvider")
  private Boolean enableOAuthServiceProvider = null;

  @SerializedName("EnableIncomingWebhooks")
  private Boolean enableIncomingWebhooks = null;

  @SerializedName("EnableOutgoingWebhooks")
  private Boolean enableOutgoingWebhooks = null;

  @SerializedName("EnableCommands")
  private Boolean enableCommands = null;

  @SerializedName("EnableOnlyAdminIntegrations")
  private Boolean enableOnlyAdminIntegrations = null;

  @SerializedName("EnablePostUsernameOverride")
  private Boolean enablePostUsernameOverride = null;

  @SerializedName("EnablePostIconOverride")
  private Boolean enablePostIconOverride = null;

  @SerializedName("EnableTesting")
  private Boolean enableTesting = null;

  @SerializedName("EnableDeveloper")
  private Boolean enableDeveloper = null;

  @SerializedName("EnableSecurityFixAlert")
  private Boolean enableSecurityFixAlert = null;

  @SerializedName("EnableInsecureOutgoingConnections")
  private Boolean enableInsecureOutgoingConnections = null;

  @SerializedName("EnableMultifactorAuthentication")
  private Boolean enableMultifactorAuthentication = null;

  @SerializedName("EnforceMultifactorAuthentication")
  private Boolean enforceMultifactorAuthentication = null;

  @SerializedName("AllowCorsFrom")
  private String allowCorsFrom = null;

  @SerializedName("SessionLengthWebInDays")
  private Integer sessionLengthWebInDays = null;

  @SerializedName("SessionLengthMobileInDays")
  private Integer sessionLengthMobileInDays = null;

  @SerializedName("SessionLengthSSOInDays")
  private Integer sessionLengthSSOInDays = null;

  @SerializedName("SessionCacheInMinutes")
  private Integer sessionCacheInMinutes = null;

  @SerializedName("WebsocketSecurePort")
  private Integer websocketSecurePort = null;

  @SerializedName("WebsocketPort")
  private Integer websocketPort = null;

  @SerializedName("WebserverMode")
  private String webserverMode = null;

  @SerializedName("EnableCustomEmoji")
  private Boolean enableCustomEmoji = null;

  @SerializedName("RestrictCustomEmojiCreation")
  private String restrictCustomEmojiCreation = null;

  public ConfigServiceSettings siteURL(String siteURL) {
    this.siteURL = siteURL;
    return this;
  }

   /**
   * Get siteURL
   * @return siteURL
  **/
  @ApiModelProperty(value = "")
  public String getSiteURL() {
    return siteURL;
  }

  public void setSiteURL(String siteURL) {
    this.siteURL = siteURL;
  }

  public ConfigServiceSettings listenAddress(String listenAddress) {
    this.listenAddress = listenAddress;
    return this;
  }

   /**
   * Get listenAddress
   * @return listenAddress
  **/
  @ApiModelProperty(value = "")
  public String getListenAddress() {
    return listenAddress;
  }

  public void setListenAddress(String listenAddress) {
    this.listenAddress = listenAddress;
  }

  public ConfigServiceSettings connectionSecurity(String connectionSecurity) {
    this.connectionSecurity = connectionSecurity;
    return this;
  }

   /**
   * Get connectionSecurity
   * @return connectionSecurity
  **/
  @ApiModelProperty(value = "")
  public String getConnectionSecurity() {
    return connectionSecurity;
  }

  public void setConnectionSecurity(String connectionSecurity) {
    this.connectionSecurity = connectionSecurity;
  }

  public ConfigServiceSettings tlSCertFile(String tlSCertFile) {
    this.tlSCertFile = tlSCertFile;
    return this;
  }

   /**
   * Get tlSCertFile
   * @return tlSCertFile
  **/
  @ApiModelProperty(value = "")
  public String getTlSCertFile() {
    return tlSCertFile;
  }

  public void setTlSCertFile(String tlSCertFile) {
    this.tlSCertFile = tlSCertFile;
  }

  public ConfigServiceSettings tlSKeyFile(String tlSKeyFile) {
    this.tlSKeyFile = tlSKeyFile;
    return this;
  }

   /**
   * Get tlSKeyFile
   * @return tlSKeyFile
  **/
  @ApiModelProperty(value = "")
  public String getTlSKeyFile() {
    return tlSKeyFile;
  }

  public void setTlSKeyFile(String tlSKeyFile) {
    this.tlSKeyFile = tlSKeyFile;
  }

  public ConfigServiceSettings useLetsEncrypt(Boolean useLetsEncrypt) {
    this.useLetsEncrypt = useLetsEncrypt;
    return this;
  }

   /**
   * Get useLetsEncrypt
   * @return useLetsEncrypt
  **/
  @ApiModelProperty(value = "")
  public Boolean isUseLetsEncrypt() {
    return useLetsEncrypt;
  }

  public void setUseLetsEncrypt(Boolean useLetsEncrypt) {
    this.useLetsEncrypt = useLetsEncrypt;
  }

  public ConfigServiceSettings letsEncryptCertificateCacheFile(String letsEncryptCertificateCacheFile) {
    this.letsEncryptCertificateCacheFile = letsEncryptCertificateCacheFile;
    return this;
  }

   /**
   * Get letsEncryptCertificateCacheFile
   * @return letsEncryptCertificateCacheFile
  **/
  @ApiModelProperty(value = "")
  public String getLetsEncryptCertificateCacheFile() {
    return letsEncryptCertificateCacheFile;
  }

  public void setLetsEncryptCertificateCacheFile(String letsEncryptCertificateCacheFile) {
    this.letsEncryptCertificateCacheFile = letsEncryptCertificateCacheFile;
  }

  public ConfigServiceSettings forward80To443(Boolean forward80To443) {
    this.forward80To443 = forward80To443;
    return this;
  }

   /**
   * Get forward80To443
   * @return forward80To443
  **/
  @ApiModelProperty(value = "")
  public Boolean isForward80To443() {
    return forward80To443;
  }

  public void setForward80To443(Boolean forward80To443) {
    this.forward80To443 = forward80To443;
  }

  public ConfigServiceSettings readTimeout(Integer readTimeout) {
    this.readTimeout = readTimeout;
    return this;
  }

   /**
   * Get readTimeout
   * @return readTimeout
  **/
  @ApiModelProperty(value = "")
  public Integer getReadTimeout() {
    return readTimeout;
  }

  public void setReadTimeout(Integer readTimeout) {
    this.readTimeout = readTimeout;
  }

  public ConfigServiceSettings writeTimeout(Integer writeTimeout) {
    this.writeTimeout = writeTimeout;
    return this;
  }

   /**
   * Get writeTimeout
   * @return writeTimeout
  **/
  @ApiModelProperty(value = "")
  public Integer getWriteTimeout() {
    return writeTimeout;
  }

  public void setWriteTimeout(Integer writeTimeout) {
    this.writeTimeout = writeTimeout;
  }

  public ConfigServiceSettings maximumLoginAttempts(Integer maximumLoginAttempts) {
    this.maximumLoginAttempts = maximumLoginAttempts;
    return this;
  }

   /**
   * Get maximumLoginAttempts
   * @return maximumLoginAttempts
  **/
  @ApiModelProperty(value = "")
  public Integer getMaximumLoginAttempts() {
    return maximumLoginAttempts;
  }

  public void setMaximumLoginAttempts(Integer maximumLoginAttempts) {
    this.maximumLoginAttempts = maximumLoginAttempts;
  }

  public ConfigServiceSettings segmentDeveloperKey(String segmentDeveloperKey) {
    this.segmentDeveloperKey = segmentDeveloperKey;
    return this;
  }

   /**
   * Get segmentDeveloperKey
   * @return segmentDeveloperKey
  **/
  @ApiModelProperty(value = "")
  public String getSegmentDeveloperKey() {
    return segmentDeveloperKey;
  }

  public void setSegmentDeveloperKey(String segmentDeveloperKey) {
    this.segmentDeveloperKey = segmentDeveloperKey;
  }

  public ConfigServiceSettings googleDeveloperKey(String googleDeveloperKey) {
    this.googleDeveloperKey = googleDeveloperKey;
    return this;
  }

   /**
   * Get googleDeveloperKey
   * @return googleDeveloperKey
  **/
  @ApiModelProperty(value = "")
  public String getGoogleDeveloperKey() {
    return googleDeveloperKey;
  }

  public void setGoogleDeveloperKey(String googleDeveloperKey) {
    this.googleDeveloperKey = googleDeveloperKey;
  }

  public ConfigServiceSettings enableOAuthServiceProvider(Boolean enableOAuthServiceProvider) {
    this.enableOAuthServiceProvider = enableOAuthServiceProvider;
    return this;
  }

   /**
   * Get enableOAuthServiceProvider
   * @return enableOAuthServiceProvider
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableOAuthServiceProvider() {
    return enableOAuthServiceProvider;
  }

  public void setEnableOAuthServiceProvider(Boolean enableOAuthServiceProvider) {
    this.enableOAuthServiceProvider = enableOAuthServiceProvider;
  }

  public ConfigServiceSettings enableIncomingWebhooks(Boolean enableIncomingWebhooks) {
    this.enableIncomingWebhooks = enableIncomingWebhooks;
    return this;
  }

   /**
   * Get enableIncomingWebhooks
   * @return enableIncomingWebhooks
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableIncomingWebhooks() {
    return enableIncomingWebhooks;
  }

  public void setEnableIncomingWebhooks(Boolean enableIncomingWebhooks) {
    this.enableIncomingWebhooks = enableIncomingWebhooks;
  }

  public ConfigServiceSettings enableOutgoingWebhooks(Boolean enableOutgoingWebhooks) {
    this.enableOutgoingWebhooks = enableOutgoingWebhooks;
    return this;
  }

   /**
   * Get enableOutgoingWebhooks
   * @return enableOutgoingWebhooks
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableOutgoingWebhooks() {
    return enableOutgoingWebhooks;
  }

  public void setEnableOutgoingWebhooks(Boolean enableOutgoingWebhooks) {
    this.enableOutgoingWebhooks = enableOutgoingWebhooks;
  }

  public ConfigServiceSettings enableCommands(Boolean enableCommands) {
    this.enableCommands = enableCommands;
    return this;
  }

   /**
   * Get enableCommands
   * @return enableCommands
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableCommands() {
    return enableCommands;
  }

  public void setEnableCommands(Boolean enableCommands) {
    this.enableCommands = enableCommands;
  }

  public ConfigServiceSettings enableOnlyAdminIntegrations(Boolean enableOnlyAdminIntegrations) {
    this.enableOnlyAdminIntegrations = enableOnlyAdminIntegrations;
    return this;
  }

   /**
   * Get enableOnlyAdminIntegrations
   * @return enableOnlyAdminIntegrations
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableOnlyAdminIntegrations() {
    return enableOnlyAdminIntegrations;
  }

  public void setEnableOnlyAdminIntegrations(Boolean enableOnlyAdminIntegrations) {
    this.enableOnlyAdminIntegrations = enableOnlyAdminIntegrations;
  }

  public ConfigServiceSettings enablePostUsernameOverride(Boolean enablePostUsernameOverride) {
    this.enablePostUsernameOverride = enablePostUsernameOverride;
    return this;
  }

   /**
   * Get enablePostUsernameOverride
   * @return enablePostUsernameOverride
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnablePostUsernameOverride() {
    return enablePostUsernameOverride;
  }

  public void setEnablePostUsernameOverride(Boolean enablePostUsernameOverride) {
    this.enablePostUsernameOverride = enablePostUsernameOverride;
  }

  public ConfigServiceSettings enablePostIconOverride(Boolean enablePostIconOverride) {
    this.enablePostIconOverride = enablePostIconOverride;
    return this;
  }

   /**
   * Get enablePostIconOverride
   * @return enablePostIconOverride
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnablePostIconOverride() {
    return enablePostIconOverride;
  }

  public void setEnablePostIconOverride(Boolean enablePostIconOverride) {
    this.enablePostIconOverride = enablePostIconOverride;
  }

  public ConfigServiceSettings enableTesting(Boolean enableTesting) {
    this.enableTesting = enableTesting;
    return this;
  }

   /**
   * Get enableTesting
   * @return enableTesting
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableTesting() {
    return enableTesting;
  }

  public void setEnableTesting(Boolean enableTesting) {
    this.enableTesting = enableTesting;
  }

  public ConfigServiceSettings enableDeveloper(Boolean enableDeveloper) {
    this.enableDeveloper = enableDeveloper;
    return this;
  }

   /**
   * Get enableDeveloper
   * @return enableDeveloper
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableDeveloper() {
    return enableDeveloper;
  }

  public void setEnableDeveloper(Boolean enableDeveloper) {
    this.enableDeveloper = enableDeveloper;
  }

  public ConfigServiceSettings enableSecurityFixAlert(Boolean enableSecurityFixAlert) {
    this.enableSecurityFixAlert = enableSecurityFixAlert;
    return this;
  }

   /**
   * Get enableSecurityFixAlert
   * @return enableSecurityFixAlert
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableSecurityFixAlert() {
    return enableSecurityFixAlert;
  }

  public void setEnableSecurityFixAlert(Boolean enableSecurityFixAlert) {
    this.enableSecurityFixAlert = enableSecurityFixAlert;
  }

  public ConfigServiceSettings enableInsecureOutgoingConnections(Boolean enableInsecureOutgoingConnections) {
    this.enableInsecureOutgoingConnections = enableInsecureOutgoingConnections;
    return this;
  }

   /**
   * Get enableInsecureOutgoingConnections
   * @return enableInsecureOutgoingConnections
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableInsecureOutgoingConnections() {
    return enableInsecureOutgoingConnections;
  }

  public void setEnableInsecureOutgoingConnections(Boolean enableInsecureOutgoingConnections) {
    this.enableInsecureOutgoingConnections = enableInsecureOutgoingConnections;
  }

  public ConfigServiceSettings enableMultifactorAuthentication(Boolean enableMultifactorAuthentication) {
    this.enableMultifactorAuthentication = enableMultifactorAuthentication;
    return this;
  }

   /**
   * Get enableMultifactorAuthentication
   * @return enableMultifactorAuthentication
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableMultifactorAuthentication() {
    return enableMultifactorAuthentication;
  }

  public void setEnableMultifactorAuthentication(Boolean enableMultifactorAuthentication) {
    this.enableMultifactorAuthentication = enableMultifactorAuthentication;
  }

  public ConfigServiceSettings enforceMultifactorAuthentication(Boolean enforceMultifactorAuthentication) {
    this.enforceMultifactorAuthentication = enforceMultifactorAuthentication;
    return this;
  }

   /**
   * Get enforceMultifactorAuthentication
   * @return enforceMultifactorAuthentication
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnforceMultifactorAuthentication() {
    return enforceMultifactorAuthentication;
  }

  public void setEnforceMultifactorAuthentication(Boolean enforceMultifactorAuthentication) {
    this.enforceMultifactorAuthentication = enforceMultifactorAuthentication;
  }

  public ConfigServiceSettings allowCorsFrom(String allowCorsFrom) {
    this.allowCorsFrom = allowCorsFrom;
    return this;
  }

   /**
   * Get allowCorsFrom
   * @return allowCorsFrom
  **/
  @ApiModelProperty(value = "")
  public String getAllowCorsFrom() {
    return allowCorsFrom;
  }

  public void setAllowCorsFrom(String allowCorsFrom) {
    this.allowCorsFrom = allowCorsFrom;
  }

  public ConfigServiceSettings sessionLengthWebInDays(Integer sessionLengthWebInDays) {
    this.sessionLengthWebInDays = sessionLengthWebInDays;
    return this;
  }

   /**
   * Get sessionLengthWebInDays
   * @return sessionLengthWebInDays
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionLengthWebInDays() {
    return sessionLengthWebInDays;
  }

  public void setSessionLengthWebInDays(Integer sessionLengthWebInDays) {
    this.sessionLengthWebInDays = sessionLengthWebInDays;
  }

  public ConfigServiceSettings sessionLengthMobileInDays(Integer sessionLengthMobileInDays) {
    this.sessionLengthMobileInDays = sessionLengthMobileInDays;
    return this;
  }

   /**
   * Get sessionLengthMobileInDays
   * @return sessionLengthMobileInDays
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionLengthMobileInDays() {
    return sessionLengthMobileInDays;
  }

  public void setSessionLengthMobileInDays(Integer sessionLengthMobileInDays) {
    this.sessionLengthMobileInDays = sessionLengthMobileInDays;
  }

  public ConfigServiceSettings sessionLengthSSOInDays(Integer sessionLengthSSOInDays) {
    this.sessionLengthSSOInDays = sessionLengthSSOInDays;
    return this;
  }

   /**
   * Get sessionLengthSSOInDays
   * @return sessionLengthSSOInDays
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionLengthSSOInDays() {
    return sessionLengthSSOInDays;
  }

  public void setSessionLengthSSOInDays(Integer sessionLengthSSOInDays) {
    this.sessionLengthSSOInDays = sessionLengthSSOInDays;
  }

  public ConfigServiceSettings sessionCacheInMinutes(Integer sessionCacheInMinutes) {
    this.sessionCacheInMinutes = sessionCacheInMinutes;
    return this;
  }

   /**
   * Get sessionCacheInMinutes
   * @return sessionCacheInMinutes
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionCacheInMinutes() {
    return sessionCacheInMinutes;
  }

  public void setSessionCacheInMinutes(Integer sessionCacheInMinutes) {
    this.sessionCacheInMinutes = sessionCacheInMinutes;
  }

  public ConfigServiceSettings websocketSecurePort(Integer websocketSecurePort) {
    this.websocketSecurePort = websocketSecurePort;
    return this;
  }

   /**
   * Get websocketSecurePort
   * @return websocketSecurePort
  **/
  @ApiModelProperty(value = "")
  public Integer getWebsocketSecurePort() {
    return websocketSecurePort;
  }

  public void setWebsocketSecurePort(Integer websocketSecurePort) {
    this.websocketSecurePort = websocketSecurePort;
  }

  public ConfigServiceSettings websocketPort(Integer websocketPort) {
    this.websocketPort = websocketPort;
    return this;
  }

   /**
   * Get websocketPort
   * @return websocketPort
  **/
  @ApiModelProperty(value = "")
  public Integer getWebsocketPort() {
    return websocketPort;
  }

  public void setWebsocketPort(Integer websocketPort) {
    this.websocketPort = websocketPort;
  }

  public ConfigServiceSettings webserverMode(String webserverMode) {
    this.webserverMode = webserverMode;
    return this;
  }

   /**
   * Get webserverMode
   * @return webserverMode
  **/
  @ApiModelProperty(value = "")
  public String getWebserverMode() {
    return webserverMode;
  }

  public void setWebserverMode(String webserverMode) {
    this.webserverMode = webserverMode;
  }

  public ConfigServiceSettings enableCustomEmoji(Boolean enableCustomEmoji) {
    this.enableCustomEmoji = enableCustomEmoji;
    return this;
  }

   /**
   * Get enableCustomEmoji
   * @return enableCustomEmoji
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableCustomEmoji() {
    return enableCustomEmoji;
  }

  public void setEnableCustomEmoji(Boolean enableCustomEmoji) {
    this.enableCustomEmoji = enableCustomEmoji;
  }

  public ConfigServiceSettings restrictCustomEmojiCreation(String restrictCustomEmojiCreation) {
    this.restrictCustomEmojiCreation = restrictCustomEmojiCreation;
    return this;
  }

   /**
   * Get restrictCustomEmojiCreation
   * @return restrictCustomEmojiCreation
  **/
  @ApiModelProperty(value = "")
  public String getRestrictCustomEmojiCreation() {
    return restrictCustomEmojiCreation;
  }

  public void setRestrictCustomEmojiCreation(String restrictCustomEmojiCreation) {
    this.restrictCustomEmojiCreation = restrictCustomEmojiCreation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigServiceSettings configServiceSettings = (ConfigServiceSettings) o;
    return Objects.equals(this.siteURL, configServiceSettings.siteURL) &&
        Objects.equals(this.listenAddress, configServiceSettings.listenAddress) &&
        Objects.equals(this.connectionSecurity, configServiceSettings.connectionSecurity) &&
        Objects.equals(this.tlSCertFile, configServiceSettings.tlSCertFile) &&
        Objects.equals(this.tlSKeyFile, configServiceSettings.tlSKeyFile) &&
        Objects.equals(this.useLetsEncrypt, configServiceSettings.useLetsEncrypt) &&
        Objects.equals(this.letsEncryptCertificateCacheFile, configServiceSettings.letsEncryptCertificateCacheFile) &&
        Objects.equals(this.forward80To443, configServiceSettings.forward80To443) &&
        Objects.equals(this.readTimeout, configServiceSettings.readTimeout) &&
        Objects.equals(this.writeTimeout, configServiceSettings.writeTimeout) &&
        Objects.equals(this.maximumLoginAttempts, configServiceSettings.maximumLoginAttempts) &&
        Objects.equals(this.segmentDeveloperKey, configServiceSettings.segmentDeveloperKey) &&
        Objects.equals(this.googleDeveloperKey, configServiceSettings.googleDeveloperKey) &&
        Objects.equals(this.enableOAuthServiceProvider, configServiceSettings.enableOAuthServiceProvider) &&
        Objects.equals(this.enableIncomingWebhooks, configServiceSettings.enableIncomingWebhooks) &&
        Objects.equals(this.enableOutgoingWebhooks, configServiceSettings.enableOutgoingWebhooks) &&
        Objects.equals(this.enableCommands, configServiceSettings.enableCommands) &&
        Objects.equals(this.enableOnlyAdminIntegrations, configServiceSettings.enableOnlyAdminIntegrations) &&
        Objects.equals(this.enablePostUsernameOverride, configServiceSettings.enablePostUsernameOverride) &&
        Objects.equals(this.enablePostIconOverride, configServiceSettings.enablePostIconOverride) &&
        Objects.equals(this.enableTesting, configServiceSettings.enableTesting) &&
        Objects.equals(this.enableDeveloper, configServiceSettings.enableDeveloper) &&
        Objects.equals(this.enableSecurityFixAlert, configServiceSettings.enableSecurityFixAlert) &&
        Objects.equals(this.enableInsecureOutgoingConnections, configServiceSettings.enableInsecureOutgoingConnections) &&
        Objects.equals(this.enableMultifactorAuthentication, configServiceSettings.enableMultifactorAuthentication) &&
        Objects.equals(this.enforceMultifactorAuthentication, configServiceSettings.enforceMultifactorAuthentication) &&
        Objects.equals(this.allowCorsFrom, configServiceSettings.allowCorsFrom) &&
        Objects.equals(this.sessionLengthWebInDays, configServiceSettings.sessionLengthWebInDays) &&
        Objects.equals(this.sessionLengthMobileInDays, configServiceSettings.sessionLengthMobileInDays) &&
        Objects.equals(this.sessionLengthSSOInDays, configServiceSettings.sessionLengthSSOInDays) &&
        Objects.equals(this.sessionCacheInMinutes, configServiceSettings.sessionCacheInMinutes) &&
        Objects.equals(this.websocketSecurePort, configServiceSettings.websocketSecurePort) &&
        Objects.equals(this.websocketPort, configServiceSettings.websocketPort) &&
        Objects.equals(this.webserverMode, configServiceSettings.webserverMode) &&
        Objects.equals(this.enableCustomEmoji, configServiceSettings.enableCustomEmoji) &&
        Objects.equals(this.restrictCustomEmojiCreation, configServiceSettings.restrictCustomEmojiCreation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(siteURL, listenAddress, connectionSecurity, tlSCertFile, tlSKeyFile, useLetsEncrypt, letsEncryptCertificateCacheFile, forward80To443, readTimeout, writeTimeout, maximumLoginAttempts, segmentDeveloperKey, googleDeveloperKey, enableOAuthServiceProvider, enableIncomingWebhooks, enableOutgoingWebhooks, enableCommands, enableOnlyAdminIntegrations, enablePostUsernameOverride, enablePostIconOverride, enableTesting, enableDeveloper, enableSecurityFixAlert, enableInsecureOutgoingConnections, enableMultifactorAuthentication, enforceMultifactorAuthentication, allowCorsFrom, sessionLengthWebInDays, sessionLengthMobileInDays, sessionLengthSSOInDays, sessionCacheInMinutes, websocketSecurePort, websocketPort, webserverMode, enableCustomEmoji, restrictCustomEmojiCreation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigServiceSettings {\n");
    
    sb.append("    siteURL: ").append(toIndentedString(siteURL)).append("\n");
    sb.append("    listenAddress: ").append(toIndentedString(listenAddress)).append("\n");
    sb.append("    connectionSecurity: ").append(toIndentedString(connectionSecurity)).append("\n");
    sb.append("    tlSCertFile: ").append(toIndentedString(tlSCertFile)).append("\n");
    sb.append("    tlSKeyFile: ").append(toIndentedString(tlSKeyFile)).append("\n");
    sb.append("    useLetsEncrypt: ").append(toIndentedString(useLetsEncrypt)).append("\n");
    sb.append("    letsEncryptCertificateCacheFile: ").append(toIndentedString(letsEncryptCertificateCacheFile)).append("\n");
    sb.append("    forward80To443: ").append(toIndentedString(forward80To443)).append("\n");
    sb.append("    readTimeout: ").append(toIndentedString(readTimeout)).append("\n");
    sb.append("    writeTimeout: ").append(toIndentedString(writeTimeout)).append("\n");
    sb.append("    maximumLoginAttempts: ").append(toIndentedString(maximumLoginAttempts)).append("\n");
    sb.append("    segmentDeveloperKey: ").append(toIndentedString(segmentDeveloperKey)).append("\n");
    sb.append("    googleDeveloperKey: ").append(toIndentedString(googleDeveloperKey)).append("\n");
    sb.append("    enableOAuthServiceProvider: ").append(toIndentedString(enableOAuthServiceProvider)).append("\n");
    sb.append("    enableIncomingWebhooks: ").append(toIndentedString(enableIncomingWebhooks)).append("\n");
    sb.append("    enableOutgoingWebhooks: ").append(toIndentedString(enableOutgoingWebhooks)).append("\n");
    sb.append("    enableCommands: ").append(toIndentedString(enableCommands)).append("\n");
    sb.append("    enableOnlyAdminIntegrations: ").append(toIndentedString(enableOnlyAdminIntegrations)).append("\n");
    sb.append("    enablePostUsernameOverride: ").append(toIndentedString(enablePostUsernameOverride)).append("\n");
    sb.append("    enablePostIconOverride: ").append(toIndentedString(enablePostIconOverride)).append("\n");
    sb.append("    enableTesting: ").append(toIndentedString(enableTesting)).append("\n");
    sb.append("    enableDeveloper: ").append(toIndentedString(enableDeveloper)).append("\n");
    sb.append("    enableSecurityFixAlert: ").append(toIndentedString(enableSecurityFixAlert)).append("\n");
    sb.append("    enableInsecureOutgoingConnections: ").append(toIndentedString(enableInsecureOutgoingConnections)).append("\n");
    sb.append("    enableMultifactorAuthentication: ").append(toIndentedString(enableMultifactorAuthentication)).append("\n");
    sb.append("    enforceMultifactorAuthentication: ").append(toIndentedString(enforceMultifactorAuthentication)).append("\n");
    sb.append("    allowCorsFrom: ").append(toIndentedString(allowCorsFrom)).append("\n");
    sb.append("    sessionLengthWebInDays: ").append(toIndentedString(sessionLengthWebInDays)).append("\n");
    sb.append("    sessionLengthMobileInDays: ").append(toIndentedString(sessionLengthMobileInDays)).append("\n");
    sb.append("    sessionLengthSSOInDays: ").append(toIndentedString(sessionLengthSSOInDays)).append("\n");
    sb.append("    sessionCacheInMinutes: ").append(toIndentedString(sessionCacheInMinutes)).append("\n");
    sb.append("    websocketSecurePort: ").append(toIndentedString(websocketSecurePort)).append("\n");
    sb.append("    websocketPort: ").append(toIndentedString(websocketPort)).append("\n");
    sb.append("    webserverMode: ").append(toIndentedString(webserverMode)).append("\n");
    sb.append("    enableCustomEmoji: ").append(toIndentedString(enableCustomEmoji)).append("\n");
    sb.append("    restrictCustomEmojiCreation: ").append(toIndentedString(restrictCustomEmojiCreation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

