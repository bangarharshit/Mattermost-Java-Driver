/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConfigLocalizationSettings
 */

public class ConfigLocalizationSettings {
  @SerializedName("DefaultServerLocale")
  private String defaultServerLocale = null;

  @SerializedName("DefaultClientLocale")
  private String defaultClientLocale = null;

  @SerializedName("AvailableLocales")
  private String availableLocales = null;

  public ConfigLocalizationSettings defaultServerLocale(String defaultServerLocale) {
    this.defaultServerLocale = defaultServerLocale;
    return this;
  }

   /**
   * Get defaultServerLocale
   * @return defaultServerLocale
  **/
  @ApiModelProperty(value = "")
  public String getDefaultServerLocale() {
    return defaultServerLocale;
  }

  public void setDefaultServerLocale(String defaultServerLocale) {
    this.defaultServerLocale = defaultServerLocale;
  }

  public ConfigLocalizationSettings defaultClientLocale(String defaultClientLocale) {
    this.defaultClientLocale = defaultClientLocale;
    return this;
  }

   /**
   * Get defaultClientLocale
   * @return defaultClientLocale
  **/
  @ApiModelProperty(value = "")
  public String getDefaultClientLocale() {
    return defaultClientLocale;
  }

  public void setDefaultClientLocale(String defaultClientLocale) {
    this.defaultClientLocale = defaultClientLocale;
  }

  public ConfigLocalizationSettings availableLocales(String availableLocales) {
    this.availableLocales = availableLocales;
    return this;
  }

   /**
   * Get availableLocales
   * @return availableLocales
  **/
  @ApiModelProperty(value = "")
  public String getAvailableLocales() {
    return availableLocales;
  }

  public void setAvailableLocales(String availableLocales) {
    this.availableLocales = availableLocales;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigLocalizationSettings configLocalizationSettings = (ConfigLocalizationSettings) o;
    return Objects.equals(this.defaultServerLocale, configLocalizationSettings.defaultServerLocale) &&
        Objects.equals(this.defaultClientLocale, configLocalizationSettings.defaultClientLocale) &&
        Objects.equals(this.availableLocales, configLocalizationSettings.availableLocales);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultServerLocale, defaultClientLocale, availableLocales);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigLocalizationSettings {\n");
    
    sb.append("    defaultServerLocale: ").append(toIndentedString(defaultServerLocale)).append("\n");
    sb.append("    defaultClientLocale: ").append(toIndentedString(defaultClientLocale)).append("\n");
    sb.append("    availableLocales: ").append(toIndentedString(availableLocales)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

