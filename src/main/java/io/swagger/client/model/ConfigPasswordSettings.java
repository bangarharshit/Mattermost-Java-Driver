/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConfigPasswordSettings
 */

public class ConfigPasswordSettings {
  @SerializedName("MinimumLength")
  private Integer minimumLength = null;

  @SerializedName("Lowercase")
  private Boolean lowercase = null;

  @SerializedName("Number")
  private Boolean number = null;

  @SerializedName("Uppercase")
  private Boolean uppercase = null;

  @SerializedName("Symbol")
  private Boolean symbol = null;

  public ConfigPasswordSettings minimumLength(Integer minimumLength) {
    this.minimumLength = minimumLength;
    return this;
  }

   /**
   * Get minimumLength
   * @return minimumLength
  **/
  @ApiModelProperty(value = "")
  public Integer getMinimumLength() {
    return minimumLength;
  }

  public void setMinimumLength(Integer minimumLength) {
    this.minimumLength = minimumLength;
  }

  public ConfigPasswordSettings lowercase(Boolean lowercase) {
    this.lowercase = lowercase;
    return this;
  }

   /**
   * Get lowercase
   * @return lowercase
  **/
  @ApiModelProperty(value = "")
  public Boolean isLowercase() {
    return lowercase;
  }

  public void setLowercase(Boolean lowercase) {
    this.lowercase = lowercase;
  }

  public ConfigPasswordSettings number(Boolean number) {
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @ApiModelProperty(value = "")
  public Boolean isNumber() {
    return number;
  }

  public void setNumber(Boolean number) {
    this.number = number;
  }

  public ConfigPasswordSettings uppercase(Boolean uppercase) {
    this.uppercase = uppercase;
    return this;
  }

   /**
   * Get uppercase
   * @return uppercase
  **/
  @ApiModelProperty(value = "")
  public Boolean isUppercase() {
    return uppercase;
  }

  public void setUppercase(Boolean uppercase) {
    this.uppercase = uppercase;
  }

  public ConfigPasswordSettings symbol(Boolean symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @ApiModelProperty(value = "")
  public Boolean isSymbol() {
    return symbol;
  }

  public void setSymbol(Boolean symbol) {
    this.symbol = symbol;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigPasswordSettings configPasswordSettings = (ConfigPasswordSettings) o;
    return Objects.equals(this.minimumLength, configPasswordSettings.minimumLength) &&
        Objects.equals(this.lowercase, configPasswordSettings.lowercase) &&
        Objects.equals(this.number, configPasswordSettings.number) &&
        Objects.equals(this.uppercase, configPasswordSettings.uppercase) &&
        Objects.equals(this.symbol, configPasswordSettings.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minimumLength, lowercase, number, uppercase, symbol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigPasswordSettings {\n");
    
    sb.append("    minimumLength: ").append(toIndentedString(minimumLength)).append("\n");
    sb.append("    lowercase: ").append(toIndentedString(lowercase)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    uppercase: ").append(toIndentedString(uppercase)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

