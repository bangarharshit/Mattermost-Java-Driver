/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Body14
 */

public class Body14 {
  @SerializedName("current_service")
  private String currentService = null;

  @SerializedName("new_service")
  private String newService = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("mfa_code")
  private String mfaCode = null;

  @SerializedName("ldap_id")
  private String ldapId = null;

  public Body14 currentService(String currentService) {
    this.currentService = currentService;
    return this;
  }

   /**
   * The service the user currently uses to login
   * @return currentService
  **/
  @ApiModelProperty(required = true, value = "The service the user currently uses to login")
  public String getCurrentService() {
    return currentService;
  }

  public void setCurrentService(String currentService) {
    this.currentService = currentService;
  }

  public Body14 newService(String newService) {
    this.newService = newService;
    return this;
  }

   /**
   * The service the user will use to login
   * @return newService
  **/
  @ApiModelProperty(required = true, value = "The service the user will use to login")
  public String getNewService() {
    return newService;
  }

  public void setNewService(String newService) {
    this.newService = newService;
  }

  public Body14 email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email of the user
   * @return email
  **/
  @ApiModelProperty(value = "The email of the user")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Body14 password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password used with the current service
   * @return password
  **/
  @ApiModelProperty(value = "The password used with the current service")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Body14 mfaCode(String mfaCode) {
    this.mfaCode = mfaCode;
    return this;
  }

   /**
   * The MFA code of the current service
   * @return mfaCode
  **/
  @ApiModelProperty(value = "The MFA code of the current service")
  public String getMfaCode() {
    return mfaCode;
  }

  public void setMfaCode(String mfaCode) {
    this.mfaCode = mfaCode;
  }

  public Body14 ldapId(String ldapId) {
    this.ldapId = ldapId;
    return this;
  }

   /**
   * The LDAP/AD id of the user
   * @return ldapId
  **/
  @ApiModelProperty(value = "The LDAP/AD id of the user")
  public String getLdapId() {
    return ldapId;
  }

  public void setLdapId(String ldapId) {
    this.ldapId = ldapId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body14 body14 = (Body14) o;
    return Objects.equals(this.currentService, body14.currentService) &&
        Objects.equals(this.newService, body14.newService) &&
        Objects.equals(this.email, body14.email) &&
        Objects.equals(this.password, body14.password) &&
        Objects.equals(this.mfaCode, body14.mfaCode) &&
        Objects.equals(this.ldapId, body14.ldapId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentService, newService, email, password, mfaCode, ldapId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body14 {\n");
    
    sb.append("    currentService: ").append(toIndentedString(currentService)).append("\n");
    sb.append("    newService: ").append(toIndentedString(newService)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    mfaCode: ").append(toIndentedString(mfaCode)).append("\n");
    sb.append("    ldapId: ").append(toIndentedString(ldapId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

