/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Emoji
 */

public class Emoji {
  @SerializedName("id")
  private String id = null;

  @SerializedName("creator_id")
  private String creatorId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("create_at")
  private Integer createAt = null;

  @SerializedName("update_at")
  private Integer updateAt = null;

  @SerializedName("delete_at")
  private Integer deleteAt = null;

  public Emoji id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the emoji
   * @return id
  **/
  @ApiModelProperty(value = "The ID of the emoji")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Emoji creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

   /**
   * The ID of the user that made the emoji
   * @return creatorId
  **/
  @ApiModelProperty(value = "The ID of the user that made the emoji")
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }

  public Emoji name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the emoji
   * @return name
  **/
  @ApiModelProperty(value = "The name of the emoji")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Emoji createAt(Integer createAt) {
    this.createAt = createAt;
    return this;
  }

   /**
   * The time at which the emoji was made
   * @return createAt
  **/
  @ApiModelProperty(value = "The time at which the emoji was made")
  public Integer getCreateAt() {
    return createAt;
  }

  public void setCreateAt(Integer createAt) {
    this.createAt = createAt;
  }

  public Emoji updateAt(Integer updateAt) {
    this.updateAt = updateAt;
    return this;
  }

   /**
   * The time at which the emoji was updated.
   * @return updateAt
  **/
  @ApiModelProperty(value = "The time at which the emoji was updated.")
  public Integer getUpdateAt() {
    return updateAt;
  }

  public void setUpdateAt(Integer updateAt) {
    this.updateAt = updateAt;
  }

  public Emoji deleteAt(Integer deleteAt) {
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * The time at which the emoji was deleted.
   * @return deleteAt
  **/
  @ApiModelProperty(value = "The time at which the emoji was deleted.")
  public Integer getDeleteAt() {
    return deleteAt;
  }

  public void setDeleteAt(Integer deleteAt) {
    this.deleteAt = deleteAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emoji emoji = (Emoji) o;
    return Objects.equals(this.id, emoji.id) &&
        Objects.equals(this.creatorId, emoji.creatorId) &&
        Objects.equals(this.name, emoji.name) &&
        Objects.equals(this.createAt, emoji.createAt) &&
        Objects.equals(this.updateAt, emoji.updateAt) &&
        Objects.equals(this.deleteAt, emoji.deleteAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creatorId, name, createAt, updateAt, deleteAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emoji {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

