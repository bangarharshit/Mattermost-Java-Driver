/*
 * Mattermost API Reference
 * ### API version 4 is stable with the Mattermost server 4.0 release. API version 3 is scheduled for deprecation on January 16th, 2018. [Details here](/#tag/APIv3-Deprecation). Looking for the APIv3 reference? It has moved [here](https://api.mattermost.com/v3). 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: feedback@mattermost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ChannelNotifyProps
 */

public class ChannelNotifyProps {
  @SerializedName("email")
  private String email = null;

  @SerializedName("push")
  private String push = null;

  @SerializedName("desktop")
  private String desktop = null;

  @SerializedName("mark_unread")
  private String markUnread = null;

  public ChannelNotifyProps email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
   * @return email
  **/
  @ApiModelProperty(value = "Set to \"true\" to enable email notifications, \"false\" to disable, or \"default\" to use the global user notification setting.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public ChannelNotifyProps push(String push) {
    this.push = push;
    return this;
  }

   /**
   * Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, \&quot;none\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
   * @return push
  **/
  @ApiModelProperty(value = "Set to \"all\" to receive push notifications for all activity, \"mention\" for mentions and direct messages only, \"none\" to disable, or \"default\" to use the global user notification setting.")
  public String getPush() {
    return push;
  }

  public void setPush(String push) {
    this.push = push;
  }

  public ChannelNotifyProps desktop(String desktop) {
    this.desktop = desktop;
    return this;
  }

   /**
   * Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, \&quot;none\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
   * @return desktop
  **/
  @ApiModelProperty(value = "Set to \"all\" to receive desktop notifications for all activity, \"mention\" for mentions and direct messages only, \"none\" to disable, or \"default\" to use the global user notification setting.")
  public String getDesktop() {
    return desktop;
  }

  public void setDesktop(String desktop) {
    this.desktop = desktop;
  }

  public ChannelNotifyProps markUnread(String markUnread) {
    this.markUnread = markUnread;
    return this;
  }

   /**
   * Set to \&quot;all\&quot; to mark the channel unread for any new message, \&quot;mention\&quot; to mark unread for new mentions only. Defaults to \&quot;all\&quot;.
   * @return markUnread
  **/
  @ApiModelProperty(value = "Set to \"all\" to mark the channel unread for any new message, \"mention\" to mark unread for new mentions only. Defaults to \"all\".")
  public String getMarkUnread() {
    return markUnread;
  }

  public void setMarkUnread(String markUnread) {
    this.markUnread = markUnread;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelNotifyProps channelNotifyProps = (ChannelNotifyProps) o;
    return Objects.equals(this.email, channelNotifyProps.email) &&
        Objects.equals(this.push, channelNotifyProps.push) &&
        Objects.equals(this.desktop, channelNotifyProps.desktop) &&
        Objects.equals(this.markUnread, channelNotifyProps.markUnread);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, push, desktop, markUnread);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelNotifyProps {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    push: ").append(toIndentedString(push)).append("\n");
    sb.append("    desktop: ").append(toIndentedString(desktop)).append("\n");
    sb.append("    markUnread: ").append(toIndentedString(markUnread)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

